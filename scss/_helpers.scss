/*

Helpers are general, single-function, immutable CSS classes used for quick styling of HTML elements.

They should only be used in cases where they are contextually necessary. If you find yourself
repeating these over and over when making components or repeating elements, you should instead
opt to style them within their own identifying class.

*/

.uppercase {
    text-transform: uppercase;
}

.text-left {
    text-align: left;
}

.text-center {
    text-align: center;
}

.text-right {
    text-align: right;
}

.full-height-width {
    height: 100% !important;
    width: 100% !important;
}

.full-width {
    width: 100% !important;
}

.full-height {
    height: 100% !important;
}


// Aspect ratios are created in a hacky way, where a percentage given to "padding-top" is actually a percentage of the element's width.
// Therefore, using these aspect-ratio classes will change the element's height to a percentage of its width via padding-top.
// Ie. only heights will change, widths will behave as normal
//
// To apply these aspect ratios to an image, give it a containing div in the following format:
//
//  <div class="aspect-ratio aspect-[x]-[y]">
//    <img />
//  </div>

// You can also apply aspect ratios to specific bootstrap breakpoints, for example:
//
//  <div class="aspect-ratio aspect-[breakpoint]-[x]-[y]">
//    <img />
//  </div>

$aspect-ratios: (
    '1-2': ( x: 1, y: 2),
    '9-16': ( x: 9, y: 16),
    '2-3': ( x: 2, y: 3),
    '3-4': ( x: 3, y: 4),
    '1-1': ( x: 1, y: 1),
    '4-3': ( x: 4, y: 3),
    '3-2': ( x: 3, y: 2),
    '16-9': ( x: 16, y: 9),
    '2-1': ( x: 2, y: 1),
    '3-1': ( x: 3, y: 1)
    );


// Set pixel height to extend aspect-ratio:
// Due to the hacky "padding-top: XX%" method of setting aspect-ratios, heights are variable with a fixed width, so setting a height breaks the ratio.
// The below allows you to set a height by calculating it based on what the width should be at that aspect ratio.
// Format becomes:
//
//  <div class="aspect-ratio aspect-[breakpoint]-[x]-[y]-[height]">
//    <img />
//  </div>

$heights: ( 100, 120 );

.aspect-ratio {
    position: relative;
    overflow: hidden;
    //
    // Create general .aspect-x-y and .aspect-x-y-height classes
    @each $ratio, $val in $aspect-ratios {

        &.aspect-#{$ratio} {
            @include define-aspect(map-get($val, width), map-get($val, height));

            @each $height in $heights {
                &-#{$height} {
                    @include define-aspect(map-get($val, width), map-get($val, height), null, $height);
                }
            }
        }
    }
    //
    // Create responsive .aspect-br-x-y and .aspect-br-x-y-height classes using Bootstrap 4's breakpoint definitions.
    @each $ratio, $val in $aspect-ratios {
        @each $br, $px in $grid-breakpoints {

            @include media-breakpoint-up($br) {
                &.aspect-#{$br}-#{$ratio} {
                    @include define-aspect(map-get($val, width), map-get($val, height));

                    @each $height in $heights {
                        &-#{$height} {
                            @include define-aspect(map-get($val, width), map-get($val, height), null, $height);
                        }
                    }
                }
            }
        }
    }

    > img, > div {
        position: absolute;
        top: 50%;
        bottom: 0;
        left: 0;
        right: 0;
        display: block;
        min-height: 100%;
        width: 100%;
        transform: translateY(-50%);
        object-fit: cover;
    }
}
